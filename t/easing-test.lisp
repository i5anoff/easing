;;;; easing-test.lisp

(in-package #:easing-test)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defparameter *easings*
    '(ease:linear
      ease:in-sine ease:out-sine ease:in-out-sine
      ease:in-cubic ease:out-cubic ease:in-out-cubic
      ease:in-quad ease:out-quad ease:in-out-quad
      ease:in-quart ease:out-quart ease:in-out-quart
      ease:in-quint ease:out-quint ease:in-out-quint
      ease:in-exp ease:out-exp ease:in-out-exp
      ease:in-circ ease:out-circ ease:in-out-circ
      ease:in-elastic ease:out-elastic ease:in-out-elastic
      ease:in-back ease:out-back ease:in-out-back
      ease:in-bounce ease:out-bounce ease:in-out-bounce)))

(def-suite easing)
(in-suite easing)

(test defeasing
  (is-true
   (= (ease:in-circ 0.3)
      (- 1 (ease:out-circ 0.7))
      (* 2 (ease:in-out-circ 0.15)))))

(defun generate-function-tests ()
  (mapcar (lambda (f)
	    `(test ,(alexandria:symbolicate f)
	       (is-true (= (,f 0.12) ,(funcall f 0.12)))))
	  *easings*))

;;; The following code can be generated by executing
;;; (generate-function-tests)

(test in-sine (is-true (= (easing:in-sine 0.12) 0.017712748481835572d0)))
(test out-sine (is-true (= (easing:out-sine 0.12) 0.18738132194319423d0)))
(test in-out-sine (is-true (= (easing:in-out-sine 0.12) 0.03511175550489043d0)))
(test in-cubic (is-true (= (easing:in-cubic 0.12) 0.0017279999)))
(test out-cubic (is-true (= (easing:out-cubic 0.12) 0.318528)))
(test in-out-cubic (is-true (= (easing:in-out-cubic 0.12) 0.0069119995)))
(test in-quad (is-true (= (easing:in-quad 0.12) 0.0144)))
(test out-quad (is-true (= (easing:out-quad 0.12) 0.2256)))
(test in-out-quad (is-true (= (easing:in-out-quad 0.12) 0.0288)))
(test in-quart (is-true (= (easing:in-quart 0.12) 2.0735999e-4)))
(test out-quart (is-true (= (easing:out-quart 0.12) 0.40030468)))
(test in-out-quart (is-true (= (easing:in-out-quart 0.12) 0.0016588799)))
(test in-quint (is-true (= (easing:in-quint 0.12) 2.4883198e-5)))
(test out-quint (is-true (= (easing:out-quint 0.12) 0.4722681)))
(test in-out-quint (is-true (= (easing:in-out-quint 0.12) 3.9813117e-4)))
(test in-exp (is-true (= (easing:in-exp 0.12) 0.0022435512)))
(test out-exp (is-true (= (easing:out-exp 0.12) 0.56472474)))
(test in-out-exp (is-true (= (easing:in-out-exp 0.12) 0.002577164)))
(test in-circ (is-true (= (easing:in-circ 0.12) 0.0072261095)))
(test out-circ (is-true (= (easing:out-circ 0.12) 0.47497368)))
(test in-out-circ (is-true (= (easing:in-out-circ 0.12) 0.014613569)))
(test in-elastic (is-true (= (easing:in-elastic 0.12) 0.0020495852816176195d0)))
(test out-elastic (is-true (= (easing:out-elastic 0.12) 1.3521450910311152d0)))
(test in-out-elastic (is-true (= (easing:in-out-elastic 0.12) -0.002520847183846066d0)))
(test in-back (is-true (= (easing:in-back 0.12) -0.01983442)))
(test out-back (is-true (= (easing:out-back 0.12) 0.4766525)))
(test in-out-back (is-true (= (easing:in-out-back 0.12) -0.030332182)))
(test in-bounce (is-true (= (easing:in-bounce 0.12) 0.033599973)))
(test out-bounce (is-true (= (easing:out-bounce 0.12) 0.10890001)))
(test in-out-bounce (is-true (= (easing:in-out-bounce 0.12) 0.018449992)))

(def-suite easing-f)
(in-suite easing-f)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defun generate-optimization-tests-list ()
    (mapcar (lambda (f)
	      `(test ,(alexandria:symbolicate 'optimized- f)
		 (is-true (= (truncate
			      (* 10000 (,(intern (string (alexandria:symbolicate f)) :ease-f)
					 0.3s0)))
			     (truncate
			      (* 10000 (,(intern (string (alexandria:symbolicate f)) :ease)
					 0.3s0)))))))
	    *easings*)))

(defmacro generate-optimization-tests ()
  `(progn
     ,@(generate-optimization-tests-list)))

(generate-optimization-tests)

(defun run-tests ()
  (run! 'easing)
  (run! 'easing-f))
